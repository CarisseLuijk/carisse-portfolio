{"version":3,"file":"static/js/609.0d198b5f.chunk.js","mappings":"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","sources":["common/Button/styles.ts","common/Button/index.tsx","common/utils/useForm.tsx","common/utils/validationRules.ts","components/Block/styles.ts","components/Block/index.tsx","common/Input/styles.ts","common/TextArea/styles.tsx","common/Input/index.tsx","common/TextArea/index.tsx","components/ContactForm/styles.ts","components/ContactForm/index.tsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const StyledButton = styled(\"button\")<any>`\n  background: ${(p) => p.color || \"#2e186a\"};\n  color: ${(p) => (p.color ? \"#2E186A\" : \"#fff\")};\n  font-size: 1rem;\n  font-weight: 700;\n  width: 100%;\n  border: 1px solid #edf3f5;\n  border-radius: 4px;\n  padding: 13px 0;\n  cursor: pointer;\n  margin-top: 0.625rem;\n  max-width: 180px;\n  transition: all 0.3s ease-in-out;\n  box-shadow: 0 16px 30px rgb(23 31 114 / 20%);\n\n  &:hover,\n  &:active,\n  &:focus {\n    color: #fff;\n    border: 1px solid rgb(255, 130, 92);\n    background-color: rgb(255, 130, 92);\n  }\n`;\n","import { StyledButton } from \"./styles\";\nimport { ButtonProps } from \"../types\";\n\nexport const Button = ({\n  color,\n  fixedWidth,\n  children,\n  onClick,\n}: ButtonProps) => (\n  <StyledButton color={color} fixedWidth={fixedWidth} onClick={onClick}>\n    {children}\n  </StyledButton>\n);\n","import { useState, useEffect } from \"react\";\nimport { notification } from \"antd\";\nimport axios from \"axios\";\n\nexport const useForm = (validate: any) => {\n  const [values, setValues] = useState({});\n  const [errors, setErrors] = useState({});\n  const [shouldSubmit, setShouldSubmit] = useState(false);\n\n  const openNotificationWithIcon = () => {\n    notification[\"success\"]({\n      message: \"Success\",\n      description: \"Your message has been sent!\",\n    });\n  };\n\n  const handleSubmit = (event: React.ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setErrors(validate(values));\n    // Your url for API\n    const url = \"\";\n    if (Object.keys(values).length === 3) {\n      axios\n        .post(url, {\n          ...values,\n        })\n        .then(() => {\n          setShouldSubmit(true);\n        });\n    }\n  };\n\n  useEffect(() => {\n    if (Object.keys(errors).length === 0 && shouldSubmit) {\n      setValues(\"\");\n      openNotificationWithIcon();\n    }\n  }, [errors, shouldSubmit]);\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.persist();\n    setValues((values) => ({\n      ...values,\n      [event.target.name]: event.target.value,\n    }));\n    setErrors((errors) => ({ ...errors, [event.target.name]: \"\" }));\n  };\n\n  return {\n    handleChange,\n    handleSubmit,\n    values,\n    errors,\n  };\n};\n","import { validateProps } from \"../../common/types\";\n\nexport default function validate(values: validateProps) {\n  let errors = {} as validateProps;\n\n  if (!values.name) {\n    errors.name = \"Name is required\";\n  }\n  if (!values.email) {\n    errors.email = \"Email address is required\";\n  } else if (!/\\S+@\\S+\\.\\S+/.test(values.email)) {\n    errors.email = \"Email address is invalid\";\n  }\n  if (!values.message) {\n    errors.message = \"Message is required\";\n  }\n  return errors;\n}\n","import styled from \"styled-components\";\n\nexport const Content = styled(\"p\")`\n  margin-top: 1.5rem;\n`;\n\nexport const Container = styled(\"div\")`\n  position: relative;\n  max-width: 700px;\n`;\n\nexport const TextWrapper = styled(\"div\")`\n  border-radius: 3rem;\n  max-width: 400px;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, TextWrapper, Content } from \"./styles\";\n\ninterface Props {\n  title: string;\n  content: string;\n  t: any;\n}\n\nconst Block = ({ title, content, t }: Props) => {\n  return (\n    <Container>\n      <h6>{t(title)}</h6>\n      <TextWrapper>\n        <Content>{t(content)}</Content>\n      </TextWrapper>\n    </Container>\n  );\n};\n\nexport default withTranslation()(Block);\n","import styled from \"styled-components\";\n\nexport const Container = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n`;\n\nexport const StyledInput = styled(\"input\")`\n  font-size: 0.875rem;\n`;\n","import styled from \"styled-components\";\n\nexport const StyledContainer = styled(\"div\")`\n  display: inline-block;\n  width: 100%;\n  padding: 10px 5px;\n  margin-bottom: -0.625rem;\n`;\n\nexport const StyledTextArea = styled(\"textarea\")`\n  resize: none;\n  font-size: 0.875rem;\n  height: 185px;\n`;\n\nexport const Label = styled(\"label\")`\n  display: block;\n  padding-bottom: 10px;\n  text-transform: capitalize;\n`;\n","import { withTranslation } from \"react-i18next\";\nimport { Container, StyledInput } from \"./styles\";\nimport { Label } from \"../TextArea/styles\";\nimport { InputProps } from \"../types\";\n\nconst Input = ({ name, placeholder, onChange, t }: InputProps) => (\n  <Container>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledInput\n      placeholder={t(placeholder)}\n      name={name}\n      id={name}\n      onChange={onChange}\n    />\n  </Container>\n);\n\nexport default withTranslation()(Input);\n","import { withTranslation } from \"react-i18next\";\nimport { StyledTextArea, StyledContainer, Label } from \"./styles\";\nimport { InputProps } from \"../types\";\n\nconst TextArea = ({ name, placeholder, onChange, t }: InputProps) => (\n  <StyledContainer>\n    <Label htmlFor={name}>{t(name)}</Label>\n    <StyledTextArea\n      placeholder={t(placeholder)}\n      id={name}\n      name={name}\n      onChange={onChange}\n    />\n  </StyledContainer>\n);\n\nexport default withTranslation()(TextArea);\n","import styled from \"styled-components\";\n\nexport const ContactContainer = styled(\"div\")`\n  padding: 5rem 0;\n\n  @media only screen and (max-width: 1024px) {\n    padding: 3rem 0;\n  }\n`;\n\nexport const FormGroup = styled(\"form\")`\n  width: 100%;\n  max-width: 520px;\n\n  @media only screen and (max-width: 1045px) {\n    max-width: 100%;\n    margin-top: 2rem;\n  }\n`;\n\nexport const Span = styled(\"span\")<any>`\n  display: block;\n  font-weight: 600;\n  color: rgb(255, 130, 92);\n  height: 0.775rem;\n  padding: 0 0.675rem;\n`;\n\nexport const ButtonContainer = styled(\"div\")`\n  text-align: end;\n  position: relative;\n\n  @media only screen and (max-width: 414px) {\n    padding-top: 0.75rem;\n  }\n`;\n","import { Row, Col } from \"antd\";\nimport { withTranslation } from \"react-i18next\";\nimport { Slide, Zoom } from \"react-awesome-reveal\";\nimport { ContactProps, ValidationTypeProps } from \"./types\";\nimport { useForm } from \"../../common/utils/useForm\";\nimport validate from \"../../common/utils/validationRules\";\nimport { Button } from \"../../common/Button\";\nimport Block from \"../Block\";\nimport Input from \"../../common/Input\";\nimport TextArea from \"../../common/TextArea\";\nimport { ContactContainer, FormGroup, Span, ButtonContainer } from \"./styles\";\n\nconst Contact = ({ title, content, id, t }: ContactProps) => {\n  const { values, errors, handleChange, handleSubmit } = useForm(\n    validate\n  ) as any;\n\n  const ValidationType = ({ type }: ValidationTypeProps) => {\n    const ErrorMessage = errors[type];\n    return (\n      <Zoom direction=\"left\">\n        <Span erros={errors[type]}>{ErrorMessage}</Span>\n      </Zoom>\n    );\n  };\n\n  return (\n    <ContactContainer id={id}>\n      <Row justify=\"space-between\" align=\"middle\">\n        <Col lg={12} md={11} sm={24} xs={24}>\n          <Slide direction=\"left\">\n            <Block title={title} content={content} />\n          </Slide>\n        </Col>\n        <Col lg={12} md={12} sm={24} xs={24}>\n          <Slide direction=\"right\">\n            <FormGroup autoComplete=\"off\" onSubmit={handleSubmit}>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"name\"\n                  placeholder=\"Your Name\"\n                  value={values.name || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"name\" />\n              </Col>\n              <Col span={24}>\n                <Input\n                  type=\"text\"\n                  name=\"email\"\n                  placeholder=\"Your Email\"\n                  value={values.email || \"\"}\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"email\" />\n              </Col>\n              <Col span={24}>\n                <TextArea\n                  placeholder=\"Your Message\"\n                  value={values.message || \"\"}\n                  name=\"message\"\n                  onChange={handleChange}\n                />\n                <ValidationType type=\"message\" />\n              </Col>\n              <ButtonContainer>\n                <Button name=\"submit\">{t(\"Submit\")}</Button>\n              </ButtonContainer>\n            </FormGroup>\n          </Slide>\n        </Col>\n      </Row>\n    </ContactContainer>\n  );\n};\n\nexport default withTranslation()(Contact);\n"],"names":["StyledButton","styled","_templateObject","_taggedTemplateLiteral","p","color","Button","_ref","fixedWidth","children","onClick","_jsx","useForm","validate","_useState","useState","_useState2","_slicedToArray","values","setValues","_useState3","_useState4","errors","setErrors","_useState5","_useState6","shouldSubmit","setShouldSubmit","useEffect","Object","keys","length","notification","message","description","handleChange","event","persist","_objectSpread","_defineProperty","target","name","value","handleSubmit","preventDefault","axios","then","email","test","Content","Container","_templateObject2","TextWrapper","_templateObject3","withTranslation","title","content","t","_jsxs","StyledInput","StyledContainer","StyledTextArea","Label","placeholder","onChange","htmlFor","id","ContactContainer","FormGroup","Span","ButtonContainer","_templateObject4","_ref2","ValidationType","_ref3","type","ErrorMessage","Zoom","direction","erros","Row","justify","align","Col","lg","md","sm","xs","Slide","Block","autoComplete","onSubmit","span","Input","TextArea"],"sourceRoot":""}